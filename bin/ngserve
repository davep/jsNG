#!/usr/bin/env node

const HTTP    = require( "http" );
const NG      = require( "../lib/jsNG" );
const ngserve = require( "commander" );

ngserve
    .usage( "[options] <file ...>" )
    .version( NG.version )
    .description( "Simple HTTP server for serving a Norton Guide file" )
    .option( "-a, --no-advert",        "Don't show the ngserve/jsNG advert" )
    .option( "-g, --graph-text",       "Preserve \"graphical\" characters in the output" )
    .option( "-p, --port <n>",         "Port to serve on", parseInt )
    .option( "-s, --stylesheet <url>", "Override the inbuilt stylesheet" )
    .parse( process.argv )

////////////////////////////////////////////////////////////////////////////
// Log something.
function log( s ) {
    console.log( s );
}

////////////////////////////////////////////////////////////////////////////
// Emit the standad header.
function dumpHeader( res, title ) {
    res.setHeader( "Content-Type", "text/html" );
    res.write( "<!DOCTYPE html>\n" );
    res.write( "<html>\n" );
    res.write( "<head>\n" );
    res.write( '<meta name="viewport" content="width=device-width, initial-scale=1">\n' );
    res.write( '<meta charset="utf-8">\n' );
    res.write( `<title>${title}</title>\n` );
    res.write( `<link rel="stylesheet" type="text/css" href="${ngserve.stylesheet}" />\n` );
    res.write( "</head>\n" );
    res.write( "<body>\n" );
}

////////////////////////////////////////////////////////////////////////////
// Emit the standad footer.
function dumpFooter( res, guide ) {

    if ( ngserve.advert ) {
        res.write( '<footer class="box">\n' );
        res.write( `Served by <a href="https://github.com/davep/jsNG">jsNG/ngserve v${NG.version}</a>\n` );
        res.write( "</footer>\n" );
    }

    res.write( "</body>\n" );
    res.write( "</html>\n" );
}

////////////////////////////////////////////////////////////////////////////
// Emit colour attribute options for the stylesheet.
function colourOptions() {
    const COLOURS = [
        "black",
        "navy",
        "green",
        "teal",
        "maroon",
        "purple",
        "olive",
        "silver",
        "gray",
        "blue",
        "lime",
        "aqua",
        "red",
        "fuchsia",
        "yellow",
        "white"
    ];
    let s = "";

    for ( let i = 0; i < COLOURS.length; i++ ) {
        s += `
span.bg${i} {
  background: ${COLOURS[ i ]}
}
span.fg${i} {
  color: ${COLOURS[ i ]}
}`
    }

    return s;
}

////////////////////////////////////////////////////////////////////////////
// Serve the stylesheet for the guide.
function serveCSS( res ) {
    res.setHeader( "Content-Type", "text/css" );
    res.write( `
body {
  font-family: sans-serif;
  background: dimgray;
}

footer {
  clear: both;
  font-size: 70%;
  color: silver;
  padding: 1ex;
}

.box {
  border: solid 1px silver;
  box-shadow: 4px 4px 7px 0px rgba( 0, 0, 0, 0.2 );
  background: navy;
  color: silver;
}

a {
  text-decoration: none;
  color: inherit;
}

nav a:hover, nav a:hover *, article a:hover, article a:hover * {
  background: red;
  color: white;
}

header nav {
  padding: 0;
  margin-bottom: 1ex;
}

header nav ul {
  padding-left: 1ex;
  padding-top: 0;
  padding-bottom: 0;
}

header nav ul li {
  display: inline-block;
  margin-right: 1em;
  color: dimgray;
}

header nav a {
  color: white;
}

section nav.menu {
  float: left;
  padding-right: 1ex;
  margin-right: 1ex;
  margin-bottom: 1ex;
}

section nav.menu ul {
  list-style: none;
  padding-left: 1ex;
}

section nav.menu > ul > li {
  color: white;
}

section nav.menu a {
  display: block;
}

nav.seeAlso {
  border-top: solid 1px silver;
  white-space: normal;
  padding-bottom: 0;
  margin-bottom: 0;
}

nav.seeAlso ul {
  padding-left: 0.5em;
  padding-bottom: 0;
  margin-bottom: 0;
}

nav.seeAlso ul li:first-child {
  color: white;
}

nav.seeAlso ul li {
  display: inline-block;
  margin-right: 1em;
}

section article {
  overflow: hidden;
  font-family: 'Roboto Mono', monospace;
  padding: 0.5em;
  margin-bottom: 1ex;
  white-space: pre;
}

section article h1 {
  color: white;
  margin-bottom: 0;
}

section article ul {
  list-style: none;
  padding-left: 1ex;
  white-space: normal;
}

section article span.ngb {
  color: white;
}

section article span.ngu {
  text-decoration: underline;
}

${colourOptions()}

section article a {
  width: 100%;
  display: inline-block;
}

`)
}

////////////////////////////////////////////////////////////////////////////
// Escape problematic HTML characters.
function unHTML( s ) {
    return s
        .replace( /&/g, "&amp;"  )
        .replace( /</g, "&lt;"   )
        .replace( />/g, "&gt;"   )
        .replace( /"/g, "&quot;" )
        .replace( /'/g, "&#039;" );
}

////////////////////////////////////////////////////////////////////////////
// Convert text from DOS to DOS-a-like.
function unDOSify( s ) {
    return ( ngserve.graphText ? NG.Tool.makeDOSish : NG.Tool.makePlain )( s );
}

////////////////////////////////////////////////////////////////////////////
// Dump the top navigation section.
function dumpTopNav( res, guide, entry = false ) {

    res.write( '<header>\n<nav class="box">\n<ul>\n' );

    const addJump = ( name, has, pos ) => {
        res.write( "<li>\n" );
        if ( has ) {
            res.write( `<a href="${pos}">${name}</a>\n`)
        } else {
            res.write( name );
        }
        res.write( "</li>\n" );
    };

    addJump( "Guides", true, "/" );

    if ( guide ) {
        addJump( "About",  true, "about" );
    }

    if ( entry ) {
        addJump( "Previous", entry.hasPrevious(), entry.previous() );
        addJump( "Up",       entry.hasParent(),   entry.parent()   );
        addJump( "Next",     entry.hasNext(),     entry.next()     );
    }

    res.write( "</ul>\n</nav>\n</header>\n" );
}

////////////////////////////////////////////////////////////////////////////
// Wrap a function call in the general head/foot code.
function dumper( res, guide, f ) {
    dumpHeader( res, guide || "Available Guides" );
    dumpTopNav( res, guide );
    res.write( "<section>\n" );
    dumpMenu( res, guide );
    res.write( '<article class="box">' );
    f( res, guide );
    res.write( "</article>\n" );
    res.write( "</section>\n" );
    dumpFooter( res, guide );
}

////////////////////////////////////////////////////////////////////////////
// Dump the "About" of the guide.
function dumpAbout( res, guide ) {
    dumper( res, guide, () => {
        res.write( `<h1>About "${unHTML( NG.Tool.makeDOSish( guide.title() ) )}".</h1><hr />\n` );
        for ( let line of guide.credits() ) {
            res.write( unHTML( unDOSify( line ) ) + "\n" );
        }
    } );
}

////////////////////////////////////////////////////////////////////////////
// Dump an error message.
function dumpError( res, guide, error ) {
    dumper( res, guide, () => res.write( error ) );
}

////////////////////////////////////////////////////////////////////////////
// Dump a menu to the browser.
function dumpMenu( res, guide ) {

    if ( guide && ( guide.menus().length > 0 ) ) {
        res.write( '<nav class="menu box">\n<ul>\n' );

        for ( let menu of guide.menus() ) {

            res.write( `<li>${menu.title()}</li>\n` );
            res.write( "<ul>\n" );

            for ( let option of menu.options() ) {
                res.write( `<li><a href="${option.offset}">${option.prompt}</a></li>\n` );
            }
            res.write( "</ul>\n" );
        }

        res.write( "</ul>\n</nav>\n" );
    }

}

////////////////////////////////////////////////////////////////////////////
// Convert an NG line to HTML.
function toHTML( line ) {
    const stack = [];
    let   s     = "";
    ( new NG.Line.Parser( {

        text: t => s += unHTML( unDOSify( t ) ),

        colour: c => {
            s += `<span class="fg${ c & 0xF } bg${ c >> 4 }">`;
            stack.push( "</span>" );
        },

        normal: t => {
            s += stack.reverse().join( "" );
            stack.length = 0;
        },

        bold: () => {
            s += '<span class="ngb">';
            stack.push( "</span>" );
        },

        unbold: () => {
            s += "</span>";
            stack.pop();
        },

        reverse: () => {
            s += '<span class="ngr">';
            stack.push( "</span>" );
        },

        unreverse: () => {
            s += "</span>";
            stack.pop();
        },

        underline: () => {
            s += '<span class="ngu">';
            stack.push( "</span>" );
        },

        ununderline: () => {
            s += "</span>",
            stack.pop();
        },

        charVal: c => s += unHTML( unDOSify( String.fromCharCode( c ) ) )

    } ) ).parse( line );
    return s + stack.reverse().join( "" );
}

////////////////////////////////////////////////////////////////////////////
// Dump an entry to the browser.
function dumpEntry( res, guide, pos ) {

    dumpHeader( res, guide );

    const entry  = guide.loadEntry( parseInt( pos ) );

    dumpTopNav( res, guide, entry );

    res.write( "<section>\n" );

    dumpMenu( res, guide );

    res.write( '<article class="box">' );
    for ( let i = 0; i < entry.lineCount(); i++ ) {
        if ( entry.isShort() && guide.isEntryAt( entry.offsets()[ i ] ) ) {
            res.write( `<a href="${entry.offsets()[ i ]}">${toHTML( entry.lines()[ i ] )}</a>\n` );
        } else {
            res.write( `${toHTML( entry.lines()[ i ] )}\n`);
        }
    }

    if ( entry.hasSeeAlso() ) {
        res.write( '<nav class="seeAlso">\n' );
        res.write( "<ul>\n<li>See Also:</li>\n" );
        for ( let seeAlso of entry.seeAlso().options() ) {
            res.write( `<li><a href="${seeAlso.offset}">${unHTML( seeAlso.prompt )}</a></li>\n` );
        }
        res.write( "</ul>\n" );
        res.write( "</nav>\n" );
    }

    res.write( "</article>\n" );
    res.write( "</section>\n" );

    dumpFooter( res, guide );

}

////////////////////////////////////////////////////////////////////////////
// Load up the list of guides we want to serve.
function InitGuidesToServe( list ) {

    const path   = require( "path" );
    const guides = new Map();

    for ( let guide of list ) {
        log( `Serving ${path.basename( guide )} from "${guide}"` );
        guides.set( path.basename( guide ), new NG.Guide( guide ).open() );
    }

    return guides;
}

////////////////////////////////////////////////////////////////////////////
// Serve a menu of guides.
function serveGuideList( req, res, guides ) {
    dumper( res, null, () => {
        res.write( "<ul>\n" );
        for ( let [ id, ng ] of [ ...guides.entries() ]. sort( ( a, b ) => {
            if ( a[ 1 ].title() < b[ 1 ].title() ) return -1;
            if ( a[ 1 ].title() > b[ 1 ].title() ) return 1;
            return 0;
        } ) ) {
            res.write( `<li><a href="${id}/">${unHTML( unDOSify( ng.title() ) )}</a></li>\n` );
        }
        res.write( "</ul>\n" );
    } );
}

////////////////////////////////////////////////////////////////////////////
// Serve the given guide.
function serveGuide( req, res, guides, source, part ) {

    // Do we have the requested guide?
    if ( guides.has( source ) ) {

        // It does. Pull it out.
        const guide = guides.get( source );

        // If what we're being asked for is empty, assume it's the first entry
        // that we're after.
        part = ( part === "" ? guide.firstEntry() : part );

        // Set some default headers.
        res.setHeader( "Server", `ngserve/jsNG/${NG.version}` );

        // Asking for the about section?
        if ( part === "about" ) {
            dumpAbout( res, guide );
        } else if ( guide.isEntryAt( parseInt( part ) ) ) {
            // Asking for an entry.
            dumpEntry( res, guide, part );
        } else {
            // Don't have it!
            res.statusCode = 404;
            dumpError( res, guide, `There is no such entry in ${source}.` );
        }

    } else {
        res.statusCode = 404;
        dumpError( res, null, `${source} is not an available guide.` );
    }
}

if ( ngserve.args.length > 0 ) {

    // Create the list of guides to serve.
    const guides = InitGuidesToServe( ngserve.args );

    // Set up defaults.
    ngserve.port       = ngserve.port       || 8080;
    ngserve.stylesheet = ngserve.stylesheet || "/css";

    HTTP.createServer( ( req, res ) => {

        try {

            // Log the request.
            log( `${req.connection.remoteAddress} ${req.method} ${req.url}` );

            // See what we're being asked for.
            const request = req.url.split( "/" );
            const source  = request[ 1 ];
            const part    = request[ 2 ];

            // Assume we're going to handle things.
            res.statusCode = 200;

            // If we're asking for a source of some description...
            if ( source ) {
                // If it's the stylesheet...
                if ( source === "css" ) {
                    // ...serve that.
                    serveCSS( res );
                } else {
                    // ...all other things should be a guide.
                    serveGuide( req, res, guides, source, part );
                }
            } else {
                // Looks like we're being asked for the main guide list.
                serveGuideList( req, res, guides );
            }

        } catch ( e ) {
            log( "Internal error:\n\n" + e.message );
            if ( res.headersSent ) {
                res.write( "Internal error:\n\n" + unHTML( e.message ) );
            } else {
                res.statusCode = 500;
                dumpError( res, null, "Internal error:\n\n" + unHTML( e.message ) );
            }
        } finally {
            res.end();
        }

    } ).listen( ngserve.port, () => {
        log( `Serving ${ngserve.args[ 0 ]}` );
        log( `Serving on http://localhost:${ngserve.port}` );
    } );

}
