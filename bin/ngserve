#!/usr/bin/env node

/*

     ngserve - Tool for serving Norton Guide files as web pages.
     Copyright (C) 2017 David A Pearson

     This program is free software; you can redistribute it and/or modify it
     under the terms of the GNU General Public License as published by the
     Free Software Foundation; either version 2 of the license, or (at your
     option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License along
     with this program; if not, write to the Free Software Foundation, Inc.,
     675 Mass Ave, Cambridge, MA 02139, USA.

*/

// Things we require.
const HTTP     = require( "http" );
const NG       = require( "../lib/jsNG" );
const NGParser = require( "../lib/jsNGParser" );
const NGError  = require( "../lib/jsNGError" );
const NGHTML   = require( "../lib/jsNGHTML" );
const ngserve  = require( "commander" );

// Set up the command line.
ngserve
    .usage( "[options] <file ...>" )
    .version( NG.version )
    .description( "Simple HTTP server for serving a Norton Guide file" )
    .option( "-a, --no-advert",              "Don't show the ngserve/jsNG advert" )
    .option( "-g, --graph-text",             "Preserve \"graphical\" characters in the output" )
    .option( "-p, --port <n>",               "Port to serve on", parseInt )
    .option( "-s, --stylesheet <urlOrFile>", "Override the inbuilt stylesheet" )
    .parse( process.argv )

// Globals.
let css;

////////////////////////////////////////////////////////////////////////////
// Log something.
function log( s ) {
    console.log( ( new Date() ).toISOString() + " " + s );
}

////////////////////////////////////////////////////////////////////////////
// Emit the standad header.
function dumpHeader( res, title, extras ) {
    NGHTML.dumpHeader( res, title, ngserve.stylesheet, extras );
}

////////////////////////////////////////////////////////////////////////////
// Emit the standad footer.
function dumpFooter( res, guide ) {
    NGHTML.dumpFooter( res, guide, ngserve.advert ? `Served by <a href="https://github.com/davep/jsNG">jsNG/ngserve v${NG.version}</a>\n` : null );
}

////////////////////////////////////////////////////////////////////////////
// Serve the stylesheet for the guide.
function serveCSS( res ) {

    res.setHeader( "Content-Type", "text/css" );

    // If we've got an alternative stylesheet to serve..
    if ( css ) {
        // ...serve that.
        res.write( css );
    } else {
        // ...otherwise use our own.
        res.write( NGHTML.css() );
    }
}

////////////////////////////////////////////////////////////////////////////
// Have a guide URL handle that we might have arguments in the URL.
function url( url, arg ) {
    if ( arg ) {
        return `../${url}`;
    }
    return url;
}

////////////////////////////////////////////////////////////////////////////
// Dump the top navigation section.
function dumpTopNav( res, guide, entry = false, arg ) {
    NGHTML.dumpTopNav( res, guide, entry, url( "about", arg ), l => url( l, arg ), "Guides" );
}

////////////////////////////////////////////////////////////////////////////
// Dump the "About" of the guide.
function dumpAbout( res, guide ) {
    NGHTML.dumpAbout( res, guide, dumpHeader, dumpTopNav, dumpMenu, dumpFooter, ngserve.graphText );
}

////////////////////////////////////////////////////////////////////////////
// Dump an error message.
function dumpError( res, guide, error ) {
    NGHTML.dumpPage( res, "Error", guide, dumpHeader, dumpTopNav, dumpMenu, dumpFooter, () => res.write( error ) );
}

////////////////////////////////////////////////////////////////////////////
// Dump a menu to the browser.
function dumpMenu( res, guide, arg ) {
    NGHTML.dumpMenu( res, guide, l => url( l, arg ) );
}

////////////////////////////////////////////////////////////////////////////
// Dump an entry to the browser.
function dumpEntry( res, guide, pos, source ) {
    NGHTML.dumpEntry( res, guide, guide.loadEntry( parseInt( pos ) ),
                      dumpHeader, dumpTopNav, dumpMenu, dumpFooter, ngserve.graphText,
                      s => url( s, source ), source ? NGHTML.unDOSify : NGHTML.toHTML );
}

////////////////////////////////////////////////////////////////////////////
// Generate a unique ID for the given guide.
function guideKey( guide ) {
    return require( "crypto" ).createHash( "md5" ).update( guide ).digest( "hex" );
}

////////////////////////////////////////////////////////////////////////////
// Given a guide ID, get its base filename.
function guideBasename( guides, guide ) {
    const path = require( "path" );
    if ( guides.has( guide ) ) {
        return path.basename( guides.get( guide ).filename() );
    }
    return guide;
}

////////////////////////////////////////////////////////////////////////////
// Given a guide ID, get its filename.
function guideFilename( guides, guide ) {
    if ( guides.has( guide ) ) {
        return guides.get( guide ).filename();
    }
    return guide;
}

////////////////////////////////////////////////////////////////////////////
// Load up the list of guides we want to serve.
function initGuidesToServe( list ) {

    const path   = require( "path" );
    const guides = new Map();

    for ( let guide of list ) {
        if ( guides.has( guideKey( path.resolve( guide ) ) ) ) {
            log( `Ignoring ${guide} as a duplicate.` );
        } else {
            log( `Serving ${path.basename( guide )} from "${path.resolve( guide )}"` );
            try {
                guides.set( guideKey( path.resolve( guide ) ), new NG.Guide( guide ).open() );
            } catch ( e ) {
                if ( e instanceof NGError ) {
                    log( `Ignoring ${guide} as it doesn't appear to be a Norton Guide file.` );
                } else {
                    throw e;
                }
            }
        }
    }

    return guides;
}

////////////////////////////////////////////////////////////////////////////
// Serve a menu of guides.
function serveGuideList( res, guides ) {
    NGHTML.dumpPage( res, "Available Guides", null, dumpHeader, dumpTopNav, dumpMenu, dumpFooter, () => {
        res.write( "<ul>\n" );
        for ( let [ id, ng ] of [ ...guides.entries() ].sort( ( a, b ) => {
            if ( a[ 1 ].title() < b[ 1 ].title() ) return -1;
            if ( a[ 1 ].title() > b[ 1 ].title() ) return 1;
            return 0;
        } ) ) {
            res.write( `<li><a href="${id}/">${NGHTML.unHTML( NGHTML.unDOSify( ng.title(), ngserve.graphText ) )}</a></li>\n` );
        }
        res.write( "</ul>\n" );
    } );
}

////////////////////////////////////////////////////////////////////////////
// Serve the given guide.
function serveGuide( res, guides, source, part, arg ) {

    // Do we have the requested guide?
    if ( guides.has( source ) ) {

        // It does. Pull it out.
        const guide = guides.get( source );

        // If what we're being asked for is empty, assume it's the first entry
        // that we're after.
        part = ( part === "" ? guide.firstEntry() : part );

        // Set some default headers.
        res.setHeader( "Server", `ngserve/jsNG/${NG.version}` );

        // Asking for the about section?
        if ( part === "about" ) {
            dumpAbout( res, guide );
        } else if ( guide.isEntryAt( parseInt( part ) ) ) {
            // Asking for an entry.
            dumpEntry( res, guide, part, arg === "source" );
        } else {
            // Don't have it!
            res.statusCode = 404;
            log( `There is no such entry in ${guideFilename( guides, source )}.` );
            dumpError( res, guide, `There is no such entry in ${guideBasename( guides, source )}.` );
        }

    } else {
        res.statusCode = 404;
        log( `${source} is not an available guide.` );
        dumpError( res, null, `${source} is not an available guide.` );
    }
}

////////////////////////////////////////////////////////////////////////////
// Figure out how we'll serve the stylesheet.
function processCSS() {

    const fs = require( "fs" );

    // If we've been given a stylesheet and it appears to exist in the
    // filesystem...
    if ( ngserve.stylesheet && fs.existsSync( ngserve.stylesheet ) ) {

        const size   = fs.statSync( ngserve.stylesheet ).size;
        const buffer = new Buffer( size );
        const f      = fs.openSync( ngserve.stylesheet, "r" );

        log( `Serving stylesheet from ${ngserve.stylesheet}.` );

        try {
            if ( fs.readSync( f, buffer, 0, size, 0 ) === size ) {
                // Having loaded the content of the file, we hold it locally
                // and then go back to serving via the usual mechanism.
                css                = buffer.toString();
                ngserve.stylesheet = "/css";
            } else {
                throw new NGError( "Could not read the whole of the stylesheet." );
            }
        } finally {
            fs.closeSync( f );
        }
    }
}

////////////////////////////////////////////////////////////////////////////
// Main code. If we have guides to serve...
if ( ngserve.args.length > 0 ) {

    // Create the list of guides to serve.
    const guides = initGuidesToServe( ngserve.args );

    // Set up defaults.
    ngserve.port       = ngserve.port       || 8080;
    ngserve.stylesheet = ngserve.stylesheet || "/css";

    // Figure out how we're going to serve the stylesheet.
    processCSS();

    HTTP.createServer( ( req, res ) => {

        try {

            // Log the request.
            log( `${req.connection.remoteAddress} ${req.method} ${req.url} ${req.headers[ 'user-agent' ]}` );

            // See what we're being asked for.
            const request = req.url.split( "/" );
            const source  = request[ 1 ];
            const part    = request[ 2 ];
            const arg     = request[ 3 ];

            // Assume we're going to handle things.
            res.statusCode = 200;

            // If we're asking for a source of some description...
            if ( source ) {
                // If it's the stylesheet...
                if ( source === "css" ) {
                    // ...serve that.
                    serveCSS( res );
                } else {
                    // ...all other things should be a guide.
                    serveGuide( res, guides, source, part, arg );
                }
            } else {
                // Looks like we're being asked for the main guide list.
                serveGuideList( res, guides );
            }

        } catch ( e ) {
            throw e;
            log( "Internal error:\n\n" + e.message );
            if ( res.headersSent ) {
                res.write( "Internal error:\n\n" + NGHTML.unHTML( e.message ) );
            } else {
                res.statusCode = 500;
                dumpError( res, null, "Internal error:\n\n" + NGHTML.unHTML( e.message ) );
            }
        } finally {
            res.end();
        }

    } ).listen( ngserve.port, () => {
        log( `Serving on http://localhost:${ngserve.port}` );
    } );

}
