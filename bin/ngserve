#!/usr/bin/env node

const HTTP    = require( "http" );
const NG      = require( "../lib/jsNG" );
const ngserve = require( "commander" );

ngserve
    .usage( "[options] <file>" )
    .version( NG.version )
    .description( "Simple HTTP server for serving a Norton Guide file" )
    .option( "-p, --port <n>", "Port to serve on", parseInt, 8080 )
    .parse( process.argv )

////////////////////////////////////////////////////////////////////////////
// Log something.
function log( s ) {
    console.log( s );
}

////////////////////////////////////////////////////////////////////////////
// Emit the standad header.
function dumpHeader( res, guide ) {
    res.setHeader( 'Content-Type', 'text/html' );
    res.write( "<!DOCTYPE html>\n" );
    res.write( "<html>\n" );
    res.write( "<head>\n" );
    res.write( '<meta name="viewport" content="width=device-width, initial-scale=1">\n' );
    res.write( '<meta charset="utf-8">\n' );
    res.write( `<title>${guide.title()}</title>\n` );
    res.write( '<link rel="stylesheet" type="text/css" href="/css" />\n' );
    res.write( "</head>\n" );
    res.write( "<body>\n" );
}

////////////////////////////////////////////////////////////////////////////
// Emit the standad footer.
function dumpFooter( res, guide ) {
    res.write( "</body>\n" );
    res.write( "</html>\n" );
}

////////////////////////////////////////////////////////////////////////////
// Emit colour attribute options for the stylesheet.
function colourOptions() {
    const COLOURS = [
        "black",
        "navy",
        "green",
        "teal",
        "maroon",
        "purple",
        "olive",
        "silver",
        "gray",
        "blue",
        "lime",
        "aqua",
        "red",
        "fuchsia",
        "yellow",
        "white"
    ];
    let s = "";

    for ( let i = 0; i < COLOURS.length; i++ ) {
        s += `
span.bg${i} {
  background: ${COLOURS[ i ]}
}
span.fg${i} {
  color: ${COLOURS[ i ]}
}`
    }

    return s;
}

////////////////////////////////////////////////////////////////////////////
// Dump the stylesheet for the guide.
function dumpCSS( res ) {
    res.setHeader( 'Content-Type', 'text/css' );
    res.end( `
body {
  font-family: sans-serif;
  background: dimgray;
}

.box {
  border: solid 1px silver;
  box-shadow: 4px 4px 7px 0px rgba( 0, 0, 0, 0.2 );
  background: navy;
  color: silver;
}

article a, nav a {
  text-decoration: none;
  color: inherit;
}

nav a:hover, nav a:hover *, article a:hover, article a:hover * {
  background: red;
  color: white;
}

header nav {
  padding: 0;
  margin-bottom: 1ex;
}

header nav ul li {
  display: inline-block;
  margin-right: 1em;
}

section nav.menu {
  float: left;
  padding-right: 1ex;
  margin-right: 1ex;
}

section nav.menu ul {
  list-style: none;
  padding-left: 1ex;
}

section nav.menu > ul > li {
  color: white;
}

section nav.menu a {
  display: block;
}

nav.seeAlso {
  border-top: solid 1px silver;
  white-space: normal;
  padding-bottom: 0;
  margin-bottom: 0;
}

nav.seeAlso ul {
  padding-left: 0.5em;
  padding-bottom: 0;
  margin-bottom: 0;
}

nav.seeAlso ul li:first-child {
  color: white;
}

nav.seeAlso ul li {
  display: inline-block;
  margin-right: 1em;
}

section article {
  overflow: hidden;
  font-family: monospace;
  padding: 0.5em;
  white-space: pre;
}

section article span.ngb {
  color: white;
}

section article span.ngu {
  text-decoration: underline;
}

${colourOptions()}

section article a {
  width: 100%;
  display: inline-block;
}

`)
}

////////////////////////////////////////////////////////////////////////////
// Escape problematic HTML characters.
function unHTML( s) {
    return s
        .replace( /&/g, "&amp;"  )
        .replace( /</g, "&lt;"   )
        .replace( />/g, "&gt;"   )
        .replace( /"/g, "&quot;" )
        .replace( /'/g, "&#039;" );
}

////////////////////////////////////////////////////////////////////////////
// Dump the "About" of the guide.
function dumpAbout( res, guide ) {
    try {

        dumpHeader( res, guide );

        res.write( "<section>\n" );

        dumpMenu( res, guide );

        res.write( '<article class="box">' );
        res.write( "<h1>About this guide</h1>\n<hr />\n" );
        for ( let line of guide.credits() ) {
            res.write( unHTML( line ) + "\n" );
        }
        res.write( "</article>\n" );

        res.write( "</section>\n" );

    } finally {
        dumpFooter( res, guide );
        res.end();
    }
}

////////////////////////////////////////////////////////////////////////////
// Dump a menu to the browser.
function dumpMenu( res, guide ) {

    res.write( '<nav class="menu box">\n<ul>\n' );

    for ( let menu of guide.menus() ) {

        res.write( `<li>${menu.title()}</li>\n` );
        res.write( "<ul>\n" );

        for ( let option of menu.options() ) {
            res.write( `<li><a href="/${option.offset}">${option.prompt}</a></li>\n` );
        }
        res.write( "</ul>\n" );
    }

    res.write( "</ul>\n</nav>\n" );

}

////////////////////////////////////////////////////////////////////////////
// Dump an the entry navigation section.
function dumpEntryNav( res, guide, entry ) {

    res.write( '<header>\n<nav class="box">\n<ul>\n' );

    const addJump = ( name, has, pos ) => {
        res.write( "<li>\n" );
        if ( has ) {
            res.write( `<a href="../${pos}">${name}</a>\n`)
        } else {
            res.write( name );
        }
        res.write( "</li>\n" );
    };

    addJump( "Previous", entry.hasPrevious(), entry.previous() );
    addJump( "Up",       entry.hasParent(),   entry.parent()   );
    addJump( "Next",     entry.hasNext(),     entry.next()     );
    addJump( "About",    true,                "about" );

    res.write( "</ul>\n</nav>\n</header>\n" );
}

////////////////////////////////////////////////////////////////////////////
// Convert an NG line to HTML.
function toHTML( line ) {
    const stack = [];
    let   s     = "";
    ( new NG.Line.Parser( {

        text: t => s += unHTML( NG.Tool.unDOSify( t ) ),

        colour: c => {
            s += `<span class="fg${ c & 0xF } bg${ c >> 4 }">`;
            stack.push( "</span>" );
        },

        normal: t => {
            s += stack.reverse().join( "" );
            stack.length = 0;
        },

        bold: () => {
            s += '<span class="ngb">';
            stack.push( "</span>" );
        },

        unbold: () => {
            s += "</span>";
            stack.pop();
        },

        reverse: () => {
            s += '<span class="ngr">';
            stack.push( "</span>" );
        },

        unreverse: () => {
            s += "</span>";
            stack.pop();
        },

        underline: () => {
            s += '<span class="ngu">';
            stack.push( "</span>" );
        },

        ununderline: () => {
            s += "</span>",
            stack.pop();
        },

        charVal: c => s += unHTML( NG.Tool.unDOSify( String.fromCharCode( c ) ) )

    } ) ).parse( line );
    return s + stack.reverse().join( "" );
}

////////////////////////////////////////////////////////////////////////////
// Dump an entry to the browser.
function dumpEntry( res, guide, pos ) {

    try {

        dumpHeader( res, guide );

        const entry  = guide.loadEntry( parseInt( pos ) );

        dumpEntryNav( res, guide, entry );

        res.write( "<section>\n" );

        dumpMenu( res, guide );

        res.write( '<article class="box">' );
        for ( let i = 0; i < entry.lineCount(); i++ ) {
            if ( entry.isShort() && guide.isEntryAt( entry.offsets()[ i ] ) ) {
                res.write( `<a href="../${entry.offsets()[ i ]}">${toHTML( entry.lines()[ i ] )}</a>\n` );
            } else {
                res.write( `${toHTML( entry.lines()[ i ] )}\n`);
            }
        }

        if ( entry.hasSeeAlso() ) {
            res.write( '<nav class="seeAlso">\n' );
            res.write( "<ul>\n<li>See Also:</li>\n" );
            for ( let seeAlso of entry.seeAlso().options() ) {
                res.write( `<li><a href="../${seeAlso.offset}">${unHTML( seeAlso.prompt )}</a></li>\n` );
            }
            res.write( "</ul>\n" );
            res.write( "</nav>\n" );
        }

        res.write( "</article>\n" );
        res.write( "</section>\n" );

    } finally {
        dumpFooter( res, guide );
        res.end();
    }
}

if ( ngserve.args.length > 0 ) {

    const ng = new NG.Guide( ngserve.args[ 0 ] ).open( true );

    HTTP.createServer( ( req, res ) => {

        // Log the request.
        log( `${req.method}\t${req.url}` );

        // See what we're being asked for.
        let path = req.url.split( "/" )[ 1 ];

        // If what we're being asked for is empty, assume it's the first
        // entry that we're after.
        path = ( path === "" ? ng.firstEntry() : path );

        res.statusCode = 200;

        // Asking for the CSS?
        if ( path === "css" ) {
            dumpCSS( res );
        } else if ( path === "about" ) {
            // Asking for the about section.
            dumpAbout( res, ng );
        } else if ( ng.isEntryAt( parseInt( path ) ) ) {
            // Asking for an entry.
            dumpEntry( res, ng, path );
        } else {
            // Don't have it!
            res.statusCode = 404;
            res.end( "Not found" );
        }

    } ).listen( ngserve.port, () => {
        log( `Listening on http://localhost:${ngserve.port}` );
    } );

}
