#!/usr/bin/env node

/*

     ng2html - Simple tool for generated HTML files from a Norton Guide.
     Copyright (C) 2017 Dave Pearson

     This program is free software: you can redistribute it and/or modify it
     under the terms of the GNU General Public License as published by the
     Free Software Foundation, either version 3 of the License, or (at your
     option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License along
     with this program. If not, see <http://www.gnu.org/licenses/>.

*/

const fs       = require( "fs" );
const path     = require( "path" );
const NG       = require( "../lib/jsNG" );
const NGParser = require( "../lib/jsNGParser" );
const NGError  = require( "../lib/jsNGError" );
const NGHTML   = require( "../lib/jsNGHTML" );
const ng2html  = require( "commander" );

// Set up the command line.
ng2html
    .usage( "[options] <file>" )
    .version( NG.version )
    .description( "Convert a Norton Guide file into a set of HTML files" )
    .option( "-a, --no-advert",        "Don't show the ngserve/jsNG advert" )
    .option( "-g, --graph-text",       "Preserve \"graphical\" characters in the output" )
    .option( "-s, --stylesheet <url>", "Override the inbuilt stylesheet" )
    .parse( process.argv )

////////////////////////////////////////////////////////////////////////////
// Return the base name of the guide (minus extension too).
function appID() {
    return `jsNG/ng2html v${NG.version}`;
}

////////////////////////////////////////////////////////////////////////////
// Return the base name of the guide (minus extension too).
function basename( guide ) {
    return path.basename( guide.filename(), path.extname( guide.filename() ) );
}

////////////////////////////////////////////////////////////////////////////
// Return the name of a file that'll be the page for the given guide entry.
function pageName( guide, entry ) {

    const offset = typeof( entry ) === "number" ? entry : entry.offset();

    if ( offset === guide.firstEntry() ) {
        return "index.html";
    }

    return `${ basename( guide ) }-${ offset.toString( 16 ) }.html`;
}

////////////////////////////////////////////////////////////////////////////
// Return the name of the about file for the guide.
function aboutName( guide ) {
    return `${ basename( guide ) }-about.html`;
}

////////////////////////////////////////////////////////////////////////////
// Emit the standad header.
function dumpHeader( res, title, extras ) {
    NGHTML.dumpHeader( res, title, ng2html.stylesheet, appID(), extras );
}

////////////////////////////////////////////////////////////////////////////
// Emit the standad footer.
function dumpFooter( f, guide ) {
    NGHTML.dumpFooter( f, guide, ng2html.advert ? `Generated by <a href="https://github.com/davep/jsNG">${appID()}</a>\n` : null );
}

////////////////////////////////////////////////////////////////////////////
// Dump the top navigation section.
function dumpTopNav( f, guide, entry = false ) {
    NGHTML.dumpTopNav( f, guide, entry, aboutName( guide ), l => pageName( guide, l ) );
}

////////////////////////////////////////////////////////////////////////////
// Dump a menu to the stream.
function dumpMenu( f, guide ) {
    NGHTML.dumpMenu( f, guide, l => pageName( guide, l ) );
}

////////////////////////////////////////////////////////////////////////////
// Dump the "About" of the guide.
function dumpAbout( f, guide ) {
    NGHTML.dumpAbout( f, guide, dumpHeader, dumpTopNav, dumpMenu, dumpFooter, ng2html.graphText );
}

////////////////////////////////////////////////////////////////////////////
// Dump the entry to the given stream.
function dumpEntry( f, guide, entry ) {
    NGHTML.dumpEntry( f, guide, entry,
                      dumpHeader, dumpTopNav, dumpMenu, dumpFooter, ng2html.graphText,
                      l => pageName( guide, l ), NGHTML.toHTML );
}

////////////////////////////////////////////////////////////////////////////
// Write the stylesheet for the guide.
function writeCSS( guide ) {
    console.log( `Creating ${ng2html.stylesheet}.` );
    fs.createWriteStream( ng2html.stylesheet ).end( NGHTML.css() );
}

////////////////////////////////////////////////////////////////////////////
// Write the about page for the given guide.
function writeAbout( guide ) {

    const page = aboutName( guide );

    console.log( `Creating ${page}.` );

    const f = fs.createWriteStream( page );

    try {
        dumpAbout( f, guide );
    } finally {
        f.end();
    }
}

////////////////////////////////////////////////////////////////////////////
// Write the given entry from the given guide.
function writeEntry( guide, entry ) {

    const page = pageName( guide, entry );

    console.log( `Creating ${page}.` );

    const f = fs.createWriteStream( page );

    try {
        dumpEntry( f, guide, entry );
    } finally {
        f.end();
    }
}

////////////////////////////////////////////////////////////////////////////
// Main code. If we have a guide to convert...
if ( ng2html.args.length > 0 ) {

    const guide = ( new NG.Guide( ng2html.args[ 0 ] ) ).open();

    // If we haven't been given a stylesheet...
    if ( !ng2html.stylesheet ) {

        // ...decide what we're going to call it...
        ng2html.stylesheet = `${ basename( guide ) }.css`;

        // ...and then write our own.
        writeCSS( guide );
    }

    // Write the about page.
    writeAbout( guide );

    // Write all the entries.
    for ( let entry of guide ) {
        writeEntry( guide, entry );
    }

} else {
    ng2html.help();
}
